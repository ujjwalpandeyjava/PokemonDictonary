1. Decide which endpoints are must 
	1. 
	2. 
2. Decide basic endpoints   --> work_with(will work on specific data form that later.)


Learn to use in project.....
springboot- multi purpose
Log4j - for logging

File contents....


1. WEBCommands.java
----> file will contain all web-Controller command numbers, URL will send command number with url for details:
e.g. 	>public class WEBCommands {
			public final static int firstPageAllPoemonName = 0;
			public final static int perPokemonStats = 1;
			public final static int calculator = 2;
			public final static int adviser = 3;
			public final static int ADD_BRANDING_CONTENT = 24;		// Add branding content
			public final static int UPDATE_BRANDING_CONTENT = 25;	// Update branding content
			public final static int GET_ALL_BRANDING_CONTENT = 26;	// Get all branding content
		}

---->DAO
e.g.	>public static synchronized int updateBrandingContent(EntityManager em, String orgId, int contentId, String cneUrl, String screenSaverUrl, String productName, String deviceName, String cneBanner, String companyName, String domain, String contactNumber)
	{
		Query query = em.createQuery("UPDATE branding_content content SET content.cneUrl = :cneUrl, content.screenSaver = :screenSaver, content.productName = :productName, content.deviceName = :deviceName, content.companyName = :companyName, content.cneBanner = :cneBanner, content.domain = :domain, content.contactNumber = :contactNumber WHERE content.orgId = :orgId and content.contentId = :contentId");
		query.setParameter("cneUrl", cneUrl);
		query.setParameter("screenSaver", screenSaverUrl);
		query.setParameter("productName", productName);
		query.setParameter("deviceName", deviceName);
		query.setParameter("companyName", companyName);
		query.setParameter("cneBanner", cneBanner);
		query.setParameter("domain", domain);
		query.setParameter("contactNumber", contactNumber);
		query.setParameter("orgId", orgId);
		query.setParameter("contentId", contentId);
		
		int rs = query.executeUpdate();
		
		return rs;		
	}


---->send data as json...
	
	String result = "{\"MESSAGE\" : \"ERROR\"}";
	
	// dao package
	JSONObject dataGot = SpecificCategory.getKindData(PK, condition1);	
	result  = dataGot.toString();
	
	response.setContentLength(result.length());					
	response.getOutputStream().print(result);
	response.getOutputStream().flush();
	
	
	
	
	
	
	
	
	
	

>> Use it 
https://docs.github.com/en/actions/security-guides/encrypted-secrets

// My New APIs 
	type_effectiveness  --> work_with("githubURL/type_effectiveness"),
	pokemon_rarity  --> work_with("githubURL//pokemon_rarity"),
	pokemon_powerup_requirements  --> work_with("githubURL/pokemon_powerup_requirements"),
	pokemon_genders  --> work_with("githubURL/pokemon_genders"),
	current_pokemon_moves  --> work_with("githubURL/current_pokemon_moves"),
	pokemon_evolutions  --> work_with("githubURL/pokemon_evolutions"),
	raid_exclusive_pokemon  --> work_with("githubURL/raid_exclusive_pokemon"),
	pokemon_buddy_distances  --> work_with("githubURL/pokemon_buddy_distances"),
	pokemon_candy_to_evolve  --> work_with("githubURL/pokemon_candy_to_evolve"),
	pokemon_stats  --> work_with("githubURL/pokemon_stats"),
	nesting_pokemon  --> work_with("githubURL/nesting_pokemon"),
	pokemon_max_cp  --> work_with("githubURL/pokemon_max_cp"),
	shiny_pokemon  --> work_with("githubURL/shiny_pokemon"),
	alolan_pokemon  --> work_with("githubURL/alolan_pokemon"),
	fast_moves  --> work_with("githubURL/fast_moves"),
	pokemon_names  --> work_with("githubURL/pokemon_names"),
	charged_moves  --> work_with("githubURL/charged_moves"),
	released_pokemon  --> work_with("githubURL/released_pokemon"),
	weather_boosts  --> work_with("githubURL/weather_boosts"),
	possible_ditto_pokemon  --> work_with("githubURL/possible_ditto_pokemon"),
	pokemon_types  --> work_with("githubURL/pokemon_types"),
	pokemon_encounter_data  --> work_with("githubURL/pokemon_encounter_data");